// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: proto/bgptopo.proto

package bgptopo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNKNOWN Type = 0
	Type_HOST    Type = 1
	Type_BGP     Type = 2
	Type_SUBTOPO Type = 3
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "HOST",
		2: "BGP",
		3: "SUBTOPO",
	}
	Type_value = map[string]int32{
		"UNKNOWN": 0,
		"HOST":    1,
		"BGP":     2,
		"SUBTOPO": 3,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bgptopo_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_proto_bgptopo_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{0}
}

type VolumeType int32

const (
	VolumeType_DEFAULT  VolumeType = 0
	VolumeType_EMPTY    VolumeType = 1
	VolumeType_HOSTPATH VolumeType = 2
)

// Enum value maps for VolumeType.
var (
	VolumeType_name = map[int32]string{
		0: "DEFAULT",
		1: "EMPTY",
		2: "HOSTPATH",
	}
	VolumeType_value = map[string]int32{
		"DEFAULT":  0,
		"EMPTY":    1,
		"HOSTPATH": 2,
	}
)

func (x VolumeType) Enum() *VolumeType {
	p := new(VolumeType)
	*p = x
	return p
}

func (x VolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bgptopo_proto_enumTypes[1].Descriptor()
}

func (VolumeType) Type() protoreflect.EnumType {
	return &file_proto_bgptopo_proto_enumTypes[1]
}

func (x VolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeType.Descriptor instead.
func (VolumeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{1}
}

// Topology message defines what nodes and links will be created
// inside the mesh.
type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                       // Name of the topology - will be linked to the cluster name
	Nodes      []*Node                       `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                                                                                                                     // List of nodes in the topology
	Links      []*Link                       `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`                                                                                                                     // connections between Nodes.
	ExportInts map[string]*InternalInterface `protobuf:"bytes,4,rep,name=export_ints,json=exportInts,proto3" json:"export_ints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //List of interface to be exported out of a topo, optional.
	UpdateTopo string                        `protobuf:"bytes,5,opt,name=update_topo,json=updateTopo,proto3" json:"update_topo,omitempty"`
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{0}
}

func (x *Topology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topology) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Topology) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Topology) GetExportInts() map[string]*InternalInterface {
	if x != nil {
		return x.ExportInts
	}
	return nil
}

func (x *Topology) GetUpdateTopo() string {
	if x != nil {
		return x.UpdateTopo
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // Name of the service (optional)
	Inside    uint32 `protobuf:"varint,2,opt,name=inside,proto3" json:"inside,omitempty"`                       // Inside port to map Node (container listening port)
	Outside   uint32 `protobuf:"varint,3,opt,name=outside,proto3" json:"outside,omitempty"`                     // Outside port to map (target port on loadbalancer)
	InsideIp  string `protobuf:"bytes,4,opt,name=inside_ip,json=insideIp,proto3" json:"inside_ip,omitempty"`    // Assigned by KNE.
	OutsideIp string `protobuf:"bytes,5,opt,name=outside_ip,json=outsideIp,proto3" json:"outside_ip,omitempty"` // Assigned by KNE.
	NodePort  uint32 `protobuf:"varint,6,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`   // Assigned by KNE.
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetInside() uint32 {
	if x != nil {
		return x.Inside
	}
	return 0
}

func (x *Service) GetOutside() uint32 {
	if x != nil {
		return x.Outside
	}
	return 0
}

func (x *Service) GetInsideIp() string {
	if x != nil {
		return x.InsideIp
	}
	return ""
}

func (x *Service) GetOutsideIp() string {
	if x != nil {
		return x.OutsideIp
	}
	return ""
}

func (x *Service) GetNodePort() uint32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ANode string `protobuf:"bytes,1,opt,name=a_node,json=aNode,proto3" json:"a_node,omitempty"`
	AInt  string `protobuf:"bytes,2,opt,name=a_int,json=aInt,proto3" json:"a_int,omitempty"`
	ZNode string `protobuf:"bytes,3,opt,name=z_node,json=zNode,proto3" json:"z_node,omitempty"`
	ZInt  string `protobuf:"bytes,4,opt,name=z_int,json=zInt,proto3" json:"z_int,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{2}
}

func (x *Link) GetANode() string {
	if x != nil {
		return x.ANode
	}
	return ""
}

func (x *Link) GetAInt() string {
	if x != nil {
		return x.AInt
	}
	return ""
}

func (x *Link) GetZNode() string {
	if x != nil {
		return x.ZNode
	}
	return ""
}

func (x *Link) GetZInt() string {
	if x != nil {
		return x.ZInt
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     Type                `protobuf:"varint,2,opt,name=type,proto3,enum=bgptopo.Type" json:"type,omitempty"`
	Path     string              `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"` //Path of subtopo's definition file.
	IpAddr   map[string]string   `protobuf:"bytes,4,rep,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services map[uint32]*Service `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map of services to enable on the node.
	Config   *Config             `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *Node) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Node) GetIpAddr() map[string]string {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *Node) GetServices() map[uint32]*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Node) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks            []*Task                   `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	ExtraImages      map[string]string         `protobuf:"bytes,2,rep,name=extra_images,json=extraImages,proto3" json:"extra_images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Other containers running on node
	ShareVolumes     map[string]*ShareVolume   `protobuf:"bytes,3,rep,name=share_volumes,json=shareVolumes,proto3" json:"share_volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContainerVolumes map[string]*PublicVolumes `protobuf:"bytes,4,rep,name=container_volumes,json=containerVolumes,proto3" json:"container_volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image            string                    `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Affinity         map[string]string         `protobuf:"bytes,6,rep,name=affinity,proto3" json:"affinity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsResilient      bool                      `protobuf:"varint,7,opt,name=is_resilient,json=isResilient,proto3" json:"is_resilient,omitempty"`
	Envs             map[string]string         `protobuf:"bytes,8,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{4}
}

func (x *Config) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Config) GetExtraImages() map[string]string {
	if x != nil {
		return x.ExtraImages
	}
	return nil
}

func (x *Config) GetShareVolumes() map[string]*ShareVolume {
	if x != nil {
		return x.ShareVolumes
	}
	return nil
}

func (x *Config) GetContainerVolumes() map[string]*PublicVolumes {
	if x != nil {
		return x.ContainerVolumes
	}
	return nil
}

func (x *Config) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Config) GetAffinity() map[string]string {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *Config) GetIsResilient() bool {
	if x != nil {
		return x.IsResilient
	}
	return false
}

func (x *Config) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

// If this is a subtopo, interface message define how internal interfaces be exported.
type InternalInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	NodeInt string `protobuf:"bytes,2,opt,name=node_int,json=nodeInt,proto3" json:"node_int,omitempty"`
}

func (x *InternalInterface) Reset() {
	*x = InternalInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalInterface) ProtoMessage() {}

func (x *InternalInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalInterface.ProtoReflect.Descriptor instead.
func (*InternalInterface) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{5}
}

func (x *InternalInterface) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *InternalInterface) GetNodeInt() string {
	if x != nil {
		return x.NodeInt
	}
	return ""
}

type ShareVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type VolumeType `protobuf:"varint,1,opt,name=type,proto3,enum=bgptopo.VolumeType" json:"type,omitempty"`
	Path string     `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ShareVolume) Reset() {
	*x = ShareVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareVolume) ProtoMessage() {}

func (x *ShareVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareVolume.ProtoReflect.Descriptor instead.
func (*ShareVolume) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{6}
}

func (x *ShareVolume) GetType() VolumeType {
	if x != nil {
		return x.Type
	}
	return VolumeType_DEFAULT
}

func (x *ShareVolume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PublicVolumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes map[string]string `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublicVolumes) Reset() {
	*x = PublicVolumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicVolumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicVolumes) ProtoMessage() {}

func (x *PublicVolumes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicVolumes.ProtoReflect.Descriptor instead.
func (*PublicVolumes) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{7}
}

func (x *PublicVolumes) GetVolumes() map[string]string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container string   `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Cmds      []string `protobuf:"bytes,2,rep,name=cmds,proto3" json:"cmds,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgptopo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgptopo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_bgptopo_proto_rawDescGZIP(), []int{8}
}

func (x *Task) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Task) GetCmds() []string {
	if x != nil {
		return x.Cmds
	}
	return nil
}

var File_proto_bgptopo_proto protoreflect.FileDescriptor

var file_proto_bgptopo_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x22, 0xa8,
	0x02, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x1a, 0x59,
	0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0x5e, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x49, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x7a, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x7a, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x49, 0x6e, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x67, 0x70, 0x74,
	0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39,
	0x0a, 0x0b, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x67,
	0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x67,
	0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x11,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0b, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x67, 0x70, 0x74, 0x6f, 0x70,
	0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x67, 0x70, 0x74,
	0x6f, 0x70, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6d, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x2a, 0x33, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x47, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x42, 0x54, 0x4f, 0x50, 0x4f,
	0x10, 0x03, 0x2a, 0x32, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x54,
	0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x42, 0x0f, 0x5a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x67, 0x70, 0x74, 0x6f, 0x70, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bgptopo_proto_rawDescOnce sync.Once
	file_proto_bgptopo_proto_rawDescData = file_proto_bgptopo_proto_rawDesc
)

func file_proto_bgptopo_proto_rawDescGZIP() []byte {
	file_proto_bgptopo_proto_rawDescOnce.Do(func() {
		file_proto_bgptopo_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bgptopo_proto_rawDescData)
	})
	return file_proto_bgptopo_proto_rawDescData
}

var file_proto_bgptopo_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_bgptopo_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_bgptopo_proto_goTypes = []interface{}{
	(Type)(0),                 // 0: bgptopo.Type
	(VolumeType)(0),           // 1: bgptopo.VolumeType
	(*Topology)(nil),          // 2: bgptopo.Topology
	(*Service)(nil),           // 3: bgptopo.Service
	(*Link)(nil),              // 4: bgptopo.Link
	(*Node)(nil),              // 5: bgptopo.Node
	(*Config)(nil),            // 6: bgptopo.Config
	(*InternalInterface)(nil), // 7: bgptopo.InternalInterface
	(*ShareVolume)(nil),       // 8: bgptopo.ShareVolume
	(*PublicVolumes)(nil),     // 9: bgptopo.PublicVolumes
	(*Task)(nil),              // 10: bgptopo.Task
	nil,                       // 11: bgptopo.Topology.ExportIntsEntry
	nil,                       // 12: bgptopo.Node.IpAddrEntry
	nil,                       // 13: bgptopo.Node.ServicesEntry
	nil,                       // 14: bgptopo.Config.ExtraImagesEntry
	nil,                       // 15: bgptopo.Config.ShareVolumesEntry
	nil,                       // 16: bgptopo.Config.ContainerVolumesEntry
	nil,                       // 17: bgptopo.Config.AffinityEntry
	nil,                       // 18: bgptopo.Config.EnvsEntry
	nil,                       // 19: bgptopo.PublicVolumes.VolumesEntry
}
var file_proto_bgptopo_proto_depIdxs = []int32{
	5,  // 0: bgptopo.Topology.nodes:type_name -> bgptopo.Node
	4,  // 1: bgptopo.Topology.links:type_name -> bgptopo.Link
	11, // 2: bgptopo.Topology.export_ints:type_name -> bgptopo.Topology.ExportIntsEntry
	0,  // 3: bgptopo.Node.type:type_name -> bgptopo.Type
	12, // 4: bgptopo.Node.ip_addr:type_name -> bgptopo.Node.IpAddrEntry
	13, // 5: bgptopo.Node.services:type_name -> bgptopo.Node.ServicesEntry
	6,  // 6: bgptopo.Node.config:type_name -> bgptopo.Config
	10, // 7: bgptopo.Config.tasks:type_name -> bgptopo.Task
	14, // 8: bgptopo.Config.extra_images:type_name -> bgptopo.Config.ExtraImagesEntry
	15, // 9: bgptopo.Config.share_volumes:type_name -> bgptopo.Config.ShareVolumesEntry
	16, // 10: bgptopo.Config.container_volumes:type_name -> bgptopo.Config.ContainerVolumesEntry
	17, // 11: bgptopo.Config.affinity:type_name -> bgptopo.Config.AffinityEntry
	18, // 12: bgptopo.Config.envs:type_name -> bgptopo.Config.EnvsEntry
	1,  // 13: bgptopo.ShareVolume.type:type_name -> bgptopo.VolumeType
	19, // 14: bgptopo.PublicVolumes.volumes:type_name -> bgptopo.PublicVolumes.VolumesEntry
	7,  // 15: bgptopo.Topology.ExportIntsEntry.value:type_name -> bgptopo.InternalInterface
	3,  // 16: bgptopo.Node.ServicesEntry.value:type_name -> bgptopo.Service
	8,  // 17: bgptopo.Config.ShareVolumesEntry.value:type_name -> bgptopo.ShareVolume
	9,  // 18: bgptopo.Config.ContainerVolumesEntry.value:type_name -> bgptopo.PublicVolumes
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_bgptopo_proto_init() }
func file_proto_bgptopo_proto_init() {
	if File_proto_bgptopo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bgptopo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicVolumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgptopo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bgptopo_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bgptopo_proto_goTypes,
		DependencyIndexes: file_proto_bgptopo_proto_depIdxs,
		EnumInfos:         file_proto_bgptopo_proto_enumTypes,
		MessageInfos:      file_proto_bgptopo_proto_msgTypes,
	}.Build()
	File_proto_bgptopo_proto = out.File
	file_proto_bgptopo_proto_rawDesc = nil
	file_proto_bgptopo_proto_goTypes = nil
	file_proto_bgptopo_proto_depIdxs = nil
}
